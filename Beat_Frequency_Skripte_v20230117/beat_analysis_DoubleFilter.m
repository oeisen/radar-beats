
close all

 top_ROI= inputdlg("top"); %Top_ROI
 top_ROI=str2num(top_ROI{1});
 bottom_ROI= inputdlg("botom");%Bottom_ROI  
 bottom_ROI=str2num(bottom_ROI{1});

%Read filenames from list 
[Dateiname]= textread('/Users/fvalero/Documents/MATLAB/orig_datei/DateiListe.txt','%s ',150);

%Folder for reading data and write results
Ordner ='/Users/fvalero/Documents/MATLAB/ergebnisse/spekt_png/'; %Folder to save the images
Ordner_1 ='/Users/fvalero/Documents/MATLAB/orig_datei/';%Folder where the files are located
Ordner_2 = '/Users/fvalero/Documents/MATLAB/ergebnisse/pft/';%Folder to save the data or "pft.mat" file


  for K = 1 : length(Dateiname)
  filename = string (Dateiname(K));  % Dateinamen in den Ordner,  



  disp(top_ROI);
  disp(bottom_ROI);
       
  thisfilename_1= strcat(Ordner_1,filename);
  thisfilename_2= strcat(Ordner_2,filename);
  thisfilename= strcat(Ordner,filename);
  abbildung_vorname_1 = strrep(thisfilename_1,'.mat','');
  abbildung_vorname_2 = strrep(thisfilename_2,'.mat','');
  abbildung_vorname = strrep(thisfilename,'.mat',''); %Dateiname ohne Endung
  
  %set Parameters
  disp(abbildung_vorname_1);
  
  % Load the data

  load(thisfilename_1);% Datein laden
  
  % plot radargram from input mat file
  
  figure(1); imagesc(20*log10(Data)); colormap(flipud(gray)); 
  figurename1 = strcat(abbildung_vorname,'_f01.png');
  saveas(gcf,figurename1);
  
  
  DatadB = 20*log10(Data); % convert to dB
  zDatadB=DatadB; %Export variable
  
  % plot first trace for control to see power change with twt

  figure(12); plot(DatadB(:,1)) ;
  figurename12 = strcat(abbildung_vorname,'_f12.png');
  saveas(gcf,figurename12);

  
  
  %Bandpass filter settings
  %---------------------------------
  filterorder=2;
  SampRat=30; 
  bpFilt = designfilt('bandpassiir','FilterOrder',filterorder, ...
        'HalfPowerFrequency1',0.1,'HalfPowerFrequency2',0.75, ...
        'SampleRate',SampRat);
  %---------------------------------

  %fvtool(bpFilt)  
  DataFilt = filter(bpFilt,DatadB); %Erste Filterung an das komplete Radagram
  figurename11 = strcat(abbildung_vorname,'_f11.png');
  figure(11) ;imagesc((DataFilt)); colormap((flipud(gray))); 
  saveas(gcf,figurename11);
  
  % plot first trace for control to see power change with twt

  figure(121); plot(DataFilt(:,1)) ;
  figurename121 = strcat(abbildung_vorname,'_f121.png');
  saveas(gcf,figurename121);

  % create subset: time in samples, trace no
  % to remove surface signals and bed
  % create time series (single-channel data) for spectral analysis with pspectrum
 
  Datasub = DataFilt(top_ROI:bottom_ROI,:); %ROI 
  
  %  --------plot subset
  figurename13 = strcat(abbildung_vorname,'_f13.png');
  figure(13); imagesc((Datasub)); colormap(flipud(gray));           
  saveas(gcf,figurename13);
  %  --------plot subset

  Datasub_2 = filter(bpFilt,Datasub); %Erste Filterung an das ROI
  zDatasub_2=Datasub_2;
  
  % -------- plot subset
  figurename131 = strcat(abbildung_vorname,'_f131.png');
  figure(131); imagesc((Datasub_2)); colormap(flipud(gray));           
  saveas(gcf,figurename131);
  
  figure(122); plot(Datasub_2(:,1)) ;
  figurename122 = strcat(abbildung_vorname,'_f122.png');
  saveas(gcf,figurename122);
  % -------- plot subset
  
  
  %Spectrogramm
  tseries = Datasub_2(:,1); 
  
  %for i= 2:2000, tseries = [tseries; Datasub_2(:,i)]; end
  for i= 2:length(Datasub_2), tseries = [tseries; Datasub_2(:,i)]; end
  
  % Define some paramters
  dt= 33e-9,% sampling rate
  %dt = 2e-9,% sampling rate
  tlength=size(Datasub_2,1)*dt, % window length of Dsub in s
  
  %size(Datasub)  % ctrl 
  % create vector of time fitting to tseries
  
  t=1:(length(tseries));  % vector of length tseries
  t=t*dt;     % turn elements to time by using time increment
 
 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Compute spectrogram
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Generated by MATLAB(R) 9.9 and Signal Processing Toolbox 8.5.
% Generated on: 19-Dec-2020 17:39:40
 
% Parameters
%timeLimits = [0 0.05655669]; % seconds
%% 
timeLimits = [0 length(tseries)*dt]; % seconds
frequencyLimits = [100000 750000]; % Hz
overlapPercent = 50;
reassignFlag = true;
 
%%
% Index into signal time region of interest
tseries_ROI = tseries(:);
sampleRate = 1/dt; 3.030303e+07; % Hz

startTime = 0; % seconds
timeValues = startTime + (0:length(tseries_ROI)-1).'/sampleRate;
minIdx = timeValues >= timeLimits(1);
maxIdx = timeValues <= timeLimits(2);
tseries_ROI = tseries_ROI(minIdx&maxIdx);
timeValues = timeValues(minIdx&maxIdx);



% Compute spectral estimate
% Run the function call below without output arguments to plot the results
% [P,F,T] = pspectrum(tseries_ROI,timeValues, 'spectrogram', 'FrequencyLimits',frequencyLimits, 'OverlapPercent',overlapPercent, 'Reassign',reassignFlag);
% plot spectrogram
 

%pspectrum(tseries_ROI,timeValues, 'spectrogram', 'FrequencyLimits',frequencyLimits, 'OverlapPercent',overlapPercent, 'Reassign',reassignFlag);
% amplitude range 5-13 or 1-13 geÃ¤ndert auf 0-10.

    figure(31); %Figure Spektrogram
    pspectrum(tseries_ROI,timeValues, 'spectrogram', 'FrequencyLimits',frequencyLimits, 'OverlapPercent',overlapPercent, 'Reassign',reassignFlag);
    hfig = gcf;
    hfig.CurrentAxes.CLim = [0 10];  % power scale
    %colormap default;
    
    figurename31 = strcat(abbildung_vorname,'_f31.png');
    saveas(gcf,figurename31);
    zData_spectrum=pspectrum(tseries_ROI,timeValues, 'spectrogram', 'FrequencyLimits',frequencyLimits, 'OverlapPercent',overlapPercent, 'Reassign',reassignFlag);

   % -------- plot radargram - spectrogram --------

   f41=figure(41);   
   set(f41, 'Units', 'normalized', 'Position', [0.2, 0.1, 0.35, 0.7]); 
   figurename41 = strcat(abbildung_vorname,'_f41.png');
  
   b1= subplot(5,10,[1:9]);
   imagesc(20*log10(Data)); colormap(b1,(flipud(gray)));

   b2= subplot(5,10,[11:19]);
   imagesc((DataFilt)); colormap(b2, (flipud(gray))); 

   b3= subplot(5,10,[21:29]);
   imagesc((Datasub)); colormap(b3,(flipud(gray))); 

   b4= subplot(5,10,[31:39]);
   imagesc((Datasub_2)); colormap(b4,(flipud(gray)));
  
   b5=subplot(5,10,[41:50]);
   pspectrum(tseries_ROI,timeValues, 'spectrogram', 'FrequencyLimits',frequencyLimits, 'OverlapPercent',overlapPercent, 'Reassign',reassignFlag);
   hfig = gcf;
   hfig.CurrentAxes.CLim = [0 10];% power scale
   set(gca,'XTick',[]);
   xlabel('Distance');
   print(figurename41,'-dpng','-r300');
  
   %plot traces for control
   f51=figure(51); 
   set(f51, 'Units', 'normalized', 'Position', [0.2, 0.1, 0.35, 0.6]); 
   figurename51 = strcat(abbildung_vorname,'_f51.png');
  
   b1= subplot(3,10,[1:10]);
   plot(DatadB(:,1)) ; 
   b2= subplot(3,10,[11:20]);
   plot(DataFilt(:,1)) ; 
   b3= subplot(3,10,[21:30]);
   plot(Datasub_2(:,1)) ; 
  
   %save plot
   print(figurename51,'-dpng','-r300');
  
 
  %Set variables to export in the _ptf.mat file
   
  [zp,zf,zt]=pspectrum(tseries_ROI,timeValues, 'spectrogram', 'FrequencyLimits',frequencyLimits, 'OverlapPercent',overlapPercent, 'Reassign',reassignFlag);
  
  lengthLatLon = length(Latitude);
  [zlatq]= interp1(1:lengthLatLon,Latitude,1:lengthLatLon/length(zt):lengthLatLon);
  [zlonq] = interp1(1:lengthLatLon,Longitude,1:lengthLatLon/length(zt):lengthLatLon);
  
  pft=strcat(abbildung_vorname_2,'_pft.mat');
  save(pft,'z*');
  
  close all
end
  
